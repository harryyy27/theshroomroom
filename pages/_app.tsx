import '../styles/globals.css'
import {useState,useEffect} from 'react';
import styles from '../styles/Home.module.css'
import Image from 'next/image'
import Head from 'next/head'
import Header from '../components/header'
import type { AppProps } from 'next/app'
import { SessionProvider,getSession } from "next-auth/react"
import {CartContext} from '../context/cart'
function MyApp({ Component, pageProps: {session,...pageProps} }: AppProps) {
  const [cart,setCart] =useState({
    items: []
  })
  const [total,setTotal]=useState(0);
  const [subTotal,setSubTotal]=useState(0);
  const [shipping,setShipping]=useState(5);
  const [loaded,setLoaded]=useState(false);
    useEffect(()=>{
        const initializeCart=async()=>{
            const data=await getSession()
            if(data){
                setCart(data.user.cart)
                if(data.user.cart.items.length>0){
                  // console.log(data.user.cart.items.reduce((a,b)=>{
                  //   return a.price*a.quantity + b.price*b.quantity}))
                  var newSubTotal = data.user.cart.items.reduce((a,b)=>{
                    return a+b.price*b.quantity
                  },0)
                  setSubTotal(newSubTotal)

                }
            }
            else {
                const key:string = "cart";
                const cartStore:string|null = localStorage.getItem(key)
                if(cartStore!== null){
                    const cartItems = JSON.parse(cartStore)
                    setCart(cartItems)
                    var newSubTotal=cartItems.user.cart.items.reduce((a,b)=>{
                      return a+b.price*b.quantity
                    },0)
                    setSubTotal(newSubTotal)
                }
            }

            setTotal(newSubTotal+shipping)
            setLoaded(true)
        }
        initializeCart()
    },[])
    const saveCart=async(e,product)=>{
        try{
            const session = await getSession()
            const newCart = {...cart}
            // console.log(newCart.items.filter(el=>el._id!==product.id))
            // console.log(product)
            if(product.quantity!==0){
              newCart.items=[...newCart.items.filter(el=>el._id!==product._id),product]
            }
            else {
              newCart.items=[...newCart.items.filter(el=>el._id!==product._id)]
            }
            if(newCart.items.length>0){
              
              setSubTotal(newCart.items.reduce((a,b)=>a.price*a.quantity+b.price*b.quantity))

            }
            else{
              setSubTotal(0)
            }
            if(session){
                const res = await fetch('http://localhost:3000/api/editUser',{
                    method:"PUT",
                    body: JSON.stringify({
                      username:session.user.email,
                      cart:newCart
                    })
                })
                setCart(newCart)
            }
            else{
                localStorage.setItem("Cart",JSON.stringify(cart))
                setCart(newCart)
            }
        }
        catch(e){
            console.log(e)
        }
    }
  return (
    <SessionProvider session={session}>
      <CartContext.Provider value={{
                cart,
                loaded,
                setCart,
                setLoaded,
                saveCart,
                subTotal,
                total,
                shipping
            }}>
        <Header/>
          <Head>
            <title>The Fungal Jungle</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
        <Component {...pageProps} />

        <footer className={styles.footer}>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{' '}
            <span className={styles.logo}>
              <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
            </span>
          </a>
        </footer>
      </CartContext.Provider>
    
</SessionProvider>
  )
}

export default MyApp
